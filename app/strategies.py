import pandas as pd
from app.config import config  # Use relative import

# --- Strategy Definitions ---
# Strategies should only take the current row (Series) and return 'buy', 'sell', or 'hold'.
# They rely on indicators already being present in the row/DataFrame.


def ema_crossover_strategy(row: pd.Series) -> str:
    """Simple EMA Crossover Strategy Signal Generator."""
    # Use indicator names generated by pandas_ta
    ema_fast_col = f"EMA_{config.EMA_FAST_PERIOD}"
    ema_slow_col = f"EMA_{config.EMA_SLOW_PERIOD}"

    # Check if necessary columns exist and have valid values
    if (
        ema_fast_col not in row
        or ema_slow_col not in row
        or pd.isna(row[ema_fast_col])
        or pd.isna(row[ema_slow_col])
    ):
        return "hold"  # Cannot determine signal

    # Check crossover condition (needs previous row's values which backtester must handle)
    # This function only sees the *current* row. The backtester needs to compare
    # current EMA values with previous ones to detect the actual cross.
    # For simplicity here, we'll signal based on current state, backtester confirms cross.
    if row[ema_fast_col] > row[ema_slow_col]:
        # Potential buy signal (currently above) - Backtester confirms cross
        return "buy_potential"
    elif row[ema_fast_col] < row[ema_slow_col]:
        # Potential sell signal (currently below) - Backtester confirms cross
        return "sell_potential"
    else:
        return "hold"


def rsi_strategy(row: pd.Series) -> str:
    """Simple RSI Oversold/Overbought Strategy Signal Generator."""
    rsi_col = f"RSI_{config.RSI_PERIOD}"
    rsi_oversold = 30
    rsi_overbought = 70

    if rsi_col not in row or pd.isna(row[rsi_col]):
        return "hold"

    # Again, signal based on current state. Backtester needs to confirm cross.
    if row[rsi_col] < rsi_oversold:
        return "buy_potential"  # Potential buy (oversold)
    elif row[rsi_col] > rsi_overbought:
        return "sell_potential"  # Potential sell (overbought)
    else:
        return "hold"


# --- Strategy Configuration ---
# Dictionary mapping strategy names to their signal functions
strategy_functions = {
    "EMA_Crossover": ema_crossover_strategy,
    "RSI_Basic": rsi_strategy,
    # Add more strategy functions here later
}
